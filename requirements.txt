
Business Problem:
A company is looking to achieve inorganic growth through acquisitions. They have asked us to develop an online tool to track and analyze potential target companies.

Challenge:
Develop a prototype that will allow the client to perform the following activities:
View a list of targets
Edit an existing target
Create a new target
Delete a target

Assumptions:
Use a modern JavaScript framework (e.g., React, Angular) - Handlebars OK per Adam
Data does not need to be persisted (use mock data)

Examples of data to be captured:
Status (e.g., researching, pending approval, approved, declined)
Company Info
Key Contacts
Financial Performance


---
User Stories

As a user, I can edit an existing target to provide updated information or fill in blanks.
As a user, if I edit something that contributes to some other figure, it is recalculated and re-rendered live.
DONE: As a user, I can view a list of targets to assess status at a glance.
DONE: As a user, I can view some extra details about a target with one click to gain more granular information.
DONE: As a user, I can view the entire record for a target at this point in the pipeline.
DONE: As a user, I can create a new target to add to the list.
DONE: As a user, I can delete a target from the list.

---
Things I want to track about targets in order to remind me of how we feel about them.

(let's not obsess over these - keep math simple but focus on TYPES of data, and start small)

*** Should be very clear about editing - some data is only consumed in this part of the site and wouldn't be editable.

Financials: Earnings last year, costs last year, profit or loss last year, value of assets, value of liabilities.
  - From this we calculate: Boolean for profitable or not. Ratio of assets to liabilities expressed as gearing/leverage.
Reliability of financials: Audited || Reported by company || Inferred from other information.
  - both of these contribute to overall impression of health of the business.
Basic company info: Location, when founded, number of employees, product(s) we are interested in.
Company info related to acquisition: important contact people, phone numbers etc. - Maybe it links to a fictional CRM for full details.

Pipeline info
Status (e.g., researching, pending approval, approved, declined)
Maybe between researching and pending approval there is another status that contains a few points to be checked off before submission for approval?
Company public status: actively seeking buyers || not officially on market
Our status: Offer ready, offer made, negotiations ongoing.

Next task: description and deadline. - expanding points to CRM. Cannot edit here. May sort by this.

Most recent activity: description and date. - expanding points to CRM. Cannot edit here. May sort by this.

Our Main interest: product || employees || physical assets || digital assets || other
Our urgency: low || normal || high - totally arbitrary internal thing that might as well be there.

Internal lead: Person who owns this from our side.

---
Things I want to show as a developer

Context for React/Vue etc even if I'm not using them.
Probably can at least make a nod to BEM for the CSS.
Show some consideration for the developer coming behind me.
Semantic HTML5

---
Ways to make life easy for the user

Obvious how to edit and what can be edited.
Obvious how to add and delete.
Confirm before destructive action.
Provide undo button for destructive actions.
List view provides status and other metrics calculated from full data, is not editable directly.
Clicking edit on a field in list or card view opens the full view and focuses the field they clicked. (turn editing.onFor(this))
On full view, explicitly link various metrics to how the appear in the list and card views.
Provide some sorting criteria for list view.
Don't break browser norms like back button.
Use local storage to be forgiving of page refreshes.

---
Ways to make life easier for the next developer

Sensible templates.
Separate business logic from presentation logic. (create and manage the right object in one place, pass the object to a template to be rendered)
Comment tricky things.
Consider structure, number of lines/files, potential build pipelines.
Remember this is development code that will have to be debugged, some global vars are useful for debugging but point out how eventually it will all run in an IIFE to mitigate scope clashes.
Clarity of intention.
Most straightforward flow of data. Follow react-style principles of one way data flow even though not enforced by framework.
Think in terms of reusable components. If handlebars is clunky, maybe ES6 template literals will be easier and feel a little more react-like.
Let's make it easy to add and change stuff.
